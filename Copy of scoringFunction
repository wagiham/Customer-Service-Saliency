{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1wuGUZarHdAI4PjcBG8ReXLwh6hj5Z3UM","timestamp":1701813553611}],"collapsed_sections":["jH3XvctwsZAD"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Generic Model Training\n","The code below sets up and trains a simple model"],"metadata":{"id":"sRosMJCmvCOy"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.tree import DecisionTreeClassifier\n","#add validation?\n","from sklearn.metrics import confusion_matrix, plot_confusion_matrix\n"],"metadata":{"id":"5D76Ec4l_5q0","colab":{"base_uri":"https://localhost:8080/","height":363},"executionInfo":{"status":"error","timestamp":1698021484490,"user_tz":240,"elapsed":154,"user":{"displayName":"Saadman Khan","userId":"18161026206221029184"}},"outputId":"fb920c09-c5a0-482e-9f2e-30188ecaa718"},"execution_count":null,"outputs":[{"output_type":"error","ename":"ImportError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-e4f01e8a1636>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtree\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDecisionTreeClassifier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m#add validation?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplot_confusion_matrix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mImportError\u001b[0m: cannot import name 'plot_confusion_matrix' from 'sklearn.metrics' (/usr/local/lib/python3.10/dist-packages/sklearn/metrics/__init__.py)","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","df = pd.read_csv('/content/drive/MyDrive/ASAPP/Code/cell2celltrain.csv')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9uFT-qEL8D-Q","executionInfo":{"status":"ok","timestamp":1696188282416,"user_tz":240,"elapsed":22046,"user":{"displayName":"Fahad Faruqi","userId":"14658484526879603264"}},"outputId":"5c3a978e-dc33-43a9-ee64-308b9ca06622"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# Load the dataset -> already given to us by default (nice)\n","df.head()\n","# Drop all non-number columns\n","df['Churn'] = df['Churn'].replace({'Yes': 1, 'No': 0})\n","df = df.select_dtypes(include=['int', 'float'])"],"metadata":{"id":"Js81zHD9-U2N"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EhHpRUpS_zes","executionInfo":{"status":"ok","timestamp":1696188282744,"user_tz":240,"elapsed":330,"user":{"displayName":"Fahad Faruqi","userId":"14658484526879603264"}},"outputId":"b03e8b49-e1ad-4265-95d2-ca78c4ac4417"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   CustomerID  Churn  MonthlyRevenue  MonthlyMinutes  TotalRecurringCharge  \\\n","0     3000002      1           24.00           219.0                  22.0   \n","1     3000010      1           16.99            10.0                  17.0   \n","2     3000014      0           38.00             8.0                  38.0   \n","3     3000022      0           82.28          1312.0                  75.0   \n","4     3000026      1           17.14             0.0                  17.0   \n","\n","   DirectorAssistedCalls  OverageMinutes  RoamingCalls  PercChangeMinutes  \\\n","0                   0.25             0.0           0.0             -157.0   \n","1                   0.00             0.0           0.0               -4.0   \n","2                   0.00             0.0           0.0               -2.0   \n","3                   1.24             0.0           0.0              157.0   \n","4                   0.00             0.0           0.0                0.0   \n","\n","   PercChangeRevenues  ...  Handsets  HandsetModels  CurrentEquipmentDays  \\\n","0               -19.0  ...       2.0            2.0                 361.0   \n","1                 0.0  ...       2.0            1.0                1504.0   \n","2                 0.0  ...       1.0            1.0                1812.0   \n","3                 8.1  ...       9.0            4.0                 458.0   \n","4                -0.2  ...       4.0            3.0                 852.0   \n","\n","   AgeHH1  AgeHH2  RetentionCalls  RetentionOffersAccepted  \\\n","0    62.0     0.0               1                        0   \n","1    40.0    42.0               0                        0   \n","2    26.0    26.0               0                        0   \n","3    30.0     0.0               0                        0   \n","4    46.0    54.0               0                        0   \n","\n","   ReferralsMadeBySubscriber  IncomeGroup  AdjustmentsToCreditRating  \n","0                          0            4                          0  \n","1                          0            5                          0  \n","2                          0            6                          0  \n","3                          0            6                          0  \n","4                          0            9                          1  \n","\n","[5 rows x 36 columns]"],"text/html":["\n","  <div id=\"df-50a8eade-75dd-46d6-ba16-6861d05a5e83\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CustomerID</th>\n","      <th>Churn</th>\n","      <th>MonthlyRevenue</th>\n","      <th>MonthlyMinutes</th>\n","      <th>TotalRecurringCharge</th>\n","      <th>DirectorAssistedCalls</th>\n","      <th>OverageMinutes</th>\n","      <th>RoamingCalls</th>\n","      <th>PercChangeMinutes</th>\n","      <th>PercChangeRevenues</th>\n","      <th>...</th>\n","      <th>Handsets</th>\n","      <th>HandsetModels</th>\n","      <th>CurrentEquipmentDays</th>\n","      <th>AgeHH1</th>\n","      <th>AgeHH2</th>\n","      <th>RetentionCalls</th>\n","      <th>RetentionOffersAccepted</th>\n","      <th>ReferralsMadeBySubscriber</th>\n","      <th>IncomeGroup</th>\n","      <th>AdjustmentsToCreditRating</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3000002</td>\n","      <td>1</td>\n","      <td>24.00</td>\n","      <td>219.0</td>\n","      <td>22.0</td>\n","      <td>0.25</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>-157.0</td>\n","      <td>-19.0</td>\n","      <td>...</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>361.0</td>\n","      <td>62.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3000010</td>\n","      <td>1</td>\n","      <td>16.99</td>\n","      <td>10.0</td>\n","      <td>17.0</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>-4.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>1504.0</td>\n","      <td>40.0</td>\n","      <td>42.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3000014</td>\n","      <td>0</td>\n","      <td>38.00</td>\n","      <td>8.0</td>\n","      <td>38.0</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>-2.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1812.0</td>\n","      <td>26.0</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3000022</td>\n","      <td>0</td>\n","      <td>82.28</td>\n","      <td>1312.0</td>\n","      <td>75.0</td>\n","      <td>1.24</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>157.0</td>\n","      <td>8.1</td>\n","      <td>...</td>\n","      <td>9.0</td>\n","      <td>4.0</td>\n","      <td>458.0</td>\n","      <td>30.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3000026</td>\n","      <td>1</td>\n","      <td>17.14</td>\n","      <td>0.0</td>\n","      <td>17.0</td>\n","      <td>0.00</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>-0.2</td>\n","      <td>...</td>\n","      <td>4.0</td>\n","      <td>3.0</td>\n","      <td>852.0</td>\n","      <td>46.0</td>\n","      <td>54.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>9</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 36 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-50a8eade-75dd-46d6-ba16-6861d05a5e83')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-50a8eade-75dd-46d6-ba16-6861d05a5e83 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-50a8eade-75dd-46d6-ba16-6861d05a5e83');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3293d33f-0e83-4213-96f9-7cc4667da198\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3293d33f-0e83-4213-96f9-7cc4667da198')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3293d33f-0e83-4213-96f9-7cc4667da198 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["df.isna().sum()\n","column_means = df.mean()\n","df = df.fillna(column_means)\n","df.isna().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w0zEiN-cjD4i","executionInfo":{"status":"ok","timestamp":1696188282745,"user_tz":240,"elapsed":6,"user":{"displayName":"Fahad Faruqi","userId":"14658484526879603264"}},"outputId":"35417cc7-f328-47ea-944d-67d513dbcb5f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["CustomerID                   0\n","Churn                        0\n","MonthlyRevenue               0\n","MonthlyMinutes               0\n","TotalRecurringCharge         0\n","DirectorAssistedCalls        0\n","OverageMinutes               0\n","RoamingCalls                 0\n","PercChangeMinutes            0\n","PercChangeRevenues           0\n","DroppedCalls                 0\n","BlockedCalls                 0\n","UnansweredCalls              0\n","CustomerCareCalls            0\n","ThreewayCalls                0\n","ReceivedCalls                0\n","OutboundCalls                0\n","InboundCalls                 0\n","PeakCallsInOut               0\n","OffPeakCallsInOut            0\n","DroppedBlockedCalls          0\n","CallForwardingCalls          0\n","CallWaitingCalls             0\n","MonthsInService              0\n","UniqueSubs                   0\n","ActiveSubs                   0\n","Handsets                     0\n","HandsetModels                0\n","CurrentEquipmentDays         0\n","AgeHH1                       0\n","AgeHH2                       0\n","RetentionCalls               0\n","RetentionOffersAccepted      0\n","ReferralsMadeBySubscriber    0\n","IncomeGroup                  0\n","AdjustmentsToCreditRating    0\n","dtype: int64"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["df.drop(['AgeHH1', 'AgeHH2'], axis=1, inplace=True)"],"metadata":{"id":"iT3YUosIjQGT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Now make the labels\n","y = df[\"Churn\"]\n","X = df.drop(['Churn'], axis = 1)"],"metadata":{"id":"E8FpAlxfACRX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"id":"Yt9NjNN1l5Ye"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Step 4: Train a Decision Tree Classifier\n","model = DecisionTreeClassifier(random_state=42)"],"metadata":{"id":"l_qMGyw6AZvz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Scoring Function"],"metadata":{"id":"jH3XvctwsZAD"}},{"cell_type":"code","source":["def score(X_train, y_train, model):\n","  scoring_functions = {\n","    'accuracy': make_scorer(accuracy_score),\n","    'precision': make_scorer(precision_score, average='macro'), #might not be useful-check into this\n","    'recall': make_scorer(recall_score, average='macro'),\n","    'f1_score': make_scorer(f1_score, average='macro'),\n","    'roc_auc': make_scorer(roc_auc_score, needs_proba=True)  # works after adding multi_class, in this scenario a continous variable is being used as the label so  multiple classes are being made\n","  }\n","  for score_name, scoring_function in scoring_functions.items():\n","    scores = cross_val_score(model, X_train, y_train, cv=5, scoring=scoring_function, error_score='raise')\n","    mean_score = np.mean(scores)\n","    # print(f'{score_name.capitalize()} Score: {mean_score:.4f}')\n","    results += mean_score\n","  return results\n"],"metadata":{"id":"Pfm2m6wreCvf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Import libraries\n","import numpy as np\n","from sklearn.model_selection import cross_val_score\n","from sklearn.metrics import make_scorer, accuracy_score, precision_score, recall_score, f1_score, roc_auc_score\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression"],"metadata":{"id":"_0ANHtELZxVj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["scoring_functions = {\n","    'accuracy': make_scorer(accuracy_score),\n","    'precision': make_scorer(precision_score, average='macro'), #might not be useful-check into this\n","    'recall': make_scorer(recall_score, average='macro'),\n","    'f1_score': make_scorer(f1_score, average='macro'),\n","    'roc_auc': make_scorer(roc_auc_score, needs_proba=True)  # works after adding multi_class, in this scenario a continous variable is being used as the label so  multiple classes are being made\n","}\n","# remove OVO for binary classification (only two possible values)"],"metadata":{"id":"3a1YGJrTZ1Yc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for score_name, scoring_function in scoring_functions.items():\n","    scores = cross_val_score(model, X_train, y_train, cv=5, scoring=scoring_function, error_score='raise')\n","    mean_score = np.mean(scores)\n","    print(f'{score_name.capitalize()} Score: {mean_score:.4f}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_UV8aYohcJO3","executionInfo":{"status":"ok","timestamp":1695002301634,"user_tz":240,"elapsed":28981,"user":{"displayName":"Fahad Faruqi","userId":"14658484526879603264"}},"outputId":"a340483f-495d-4cca-9733-711b4c37597d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy Score: 0.6197\n","Precision Score: 0.5420\n","Recall Score: 0.5429\n","F1_score Score: 0.5423\n","Roc_auc Score: 0.5429\n"]}]},{"cell_type":"code","source":["cm=confusion_matrix(y_true, y_pred) #Rows Predicted Values and Columns are True Values\n","disp = ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=clf.classes_)#I think we can adjust the working of our labels\n"],"metadata":{"id":"Sr-Zt-E999rQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["<h1>Experimental Word Vectorization Problem</h1>"],"metadata":{"id":"cMbI_20dBGTW"}},{"cell_type":"code","source":[],"metadata":{"id":"rDuS06yYhxKG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"Gs_HU2MeiUco"}},{"cell_type":"markdown","source":["# Bayesian Optimization"],"metadata":{"id":"EeqJfBFz3Nm9"}},{"cell_type":"code","source":["!pip install -U bayesian-optimization\n","# lr_model = train_test_LR(X_train, X_test, y_train, y_test)\n","# !pip install numpy==1.21.6\n","from sklearn.model_selection import cross_val_score"],"metadata":{"id":"ce9CcmGG3RWW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1698677113890,"user_tz":240,"elapsed":11079,"user":{"displayName":"Fahad Faruqi","userId":"08110065941072977944"}},"outputId":"7459f9e2-c09c-4345-8fe4-4a0a361cea1b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: bayesian-optimization in /usr/local/lib/python3.10/dist-packages (1.4.3)\n","Requirement already satisfied: numpy>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from bayesian-optimization) (1.23.5)\n","Requirement already satisfied: scipy>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from bayesian-optimization) (1.11.3)\n","Requirement already satisfied: scikit-learn>=0.18.0 in /usr/local/lib/python3.10/dist-packages (from bayesian-optimization) (1.2.2)\n","Requirement already satisfied: colorama>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from bayesian-optimization) (0.4.6)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.18.0->bayesian-optimization) (1.3.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.18.0->bayesian-optimization) (3.2.0)\n"]}]},{"cell_type":"code","source":["# from bayesian_optimization import BayesianOptimization\n","from bayes_opt import BayesianOptimization"],"metadata":{"id":"nadMGqlv5siN"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Define the objective function.\n","This function will evaluate the performance of a logistic regression model on the training set for a given set of hyperparameter values.\n","\n","Automatically works using `X_train_word_vectors` and `y_train` (make sure they're in memory!)"],"metadata":{"id":"iMo-oWLhD_xZ"}},{"cell_type":"code","source":["def objective_function(C, solver, max_iter):\n","    solver = list(solver_mapping.keys())[int(solver)]\n","    model = LogisticRegression(C=C, solver=solver, max_iter=int(max_iter))\n","    model.fit(X_train_word_vectors, y_train)\n","\n","    # change to f1 score\n","    accuracy = cross_val_score(model, X_train_word_vectors, y_train, cv=5, scoring='accuracy')\n","    return np.mean(accuracy)"],"metadata":{"id":"JyCuHdey7yi7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["solver_mapping = {\n","    'saga': 0,\n","    'newton-cg': 1,\n","    'lbfgs': 2,\n","    'liblinear': 3,\n","    'sag':4,\n","    'newton-cholesky':5\n","}\n","hyperparameters = {\n","  'C': (1e-5, 1e5),\n","  'solver': (0, len(solver_mapping) - 1),  # index range for solver\n","  'max_iter': (1, 1000000)\n","}"],"metadata":{"id":"UBA6TgZe4PNk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Initialize the Bayesian optimization algorithm"],"metadata":{"id":"DUj-W66lEDj6"}},{"cell_type":"code","source":["bo = BayesianOptimization(\n","  f=objective_function,\n","  verbose=2,\n","  pbounds=hyperparameters\n",")"],"metadata":{"id":"0imiVo2VEE6A"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Run the Bayesian optimization algorithm & Print Results"],"metadata":{"id":"dwa1pVduERmw"}},{"cell_type":"code","source":["bo.maximize(init_points=5, n_iter=10)\n","best_hyperparameters = bo.max['params']\n","print(best_hyperparameters)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zlypzTQfEK2x","executionInfo":{"status":"ok","timestamp":1698682521629,"user_tz":240,"elapsed":5401739,"user":{"displayName":"Fahad Faruqi","userId":"08110065941072977944"}},"outputId":"ea54b1f3-bb0d-4eb4-8180-5d89638a567a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["|   iter    |  target   |     C     | max_iter  |  solver   |\n","-------------------------------------------------------------\n","| \u001b[0m1        \u001b[0m | \u001b[0m0.7888   \u001b[0m | \u001b[0m3.425e+04\u001b[0m | \u001b[0m1.817e+04\u001b[0m | \u001b[0m2.183    \u001b[0m |\n","| \u001b[95m2        \u001b[0m | \u001b[95m0.7888   \u001b[0m | \u001b[95m5.341e+04\u001b[0m | \u001b[95m5.972e+05\u001b[0m | \u001b[95m3.601    \u001b[0m |\n","| \u001b[0m3        \u001b[0m | \u001b[0m0.7887   \u001b[0m | \u001b[0m4.415e+04\u001b[0m | \u001b[0m8.061e+05\u001b[0m | \u001b[0m3.782    \u001b[0m |\n","| \u001b[95m4        \u001b[0m | \u001b[95m0.7891   \u001b[0m | \u001b[95m2.295e+04\u001b[0m | \u001b[95m7.393e+05\u001b[0m | \u001b[95m0.6363   \u001b[0m |\n","| \u001b[0m5        \u001b[0m | \u001b[0m0.789    \u001b[0m | \u001b[0m9.921e+04\u001b[0m | \u001b[0m6.939e+05\u001b[0m | \u001b[0m4.933    \u001b[0m |\n","| \u001b[0m6        \u001b[0m | \u001b[0m0.7888   \u001b[0m | \u001b[0m4.449e+04\u001b[0m | \u001b[0m9.728e+05\u001b[0m | \u001b[0m2.577    \u001b[0m |\n","| \u001b[0m7        \u001b[0m | \u001b[0m0.7888   \u001b[0m | \u001b[0m8.714e+04\u001b[0m | \u001b[0m2.954e+05\u001b[0m | \u001b[0m3.182    \u001b[0m |\n","| \u001b[0m8        \u001b[0m | \u001b[0m0.7888   \u001b[0m | \u001b[0m1.197e+04\u001b[0m | \u001b[0m8.539e+05\u001b[0m | \u001b[0m2.229    \u001b[0m |\n","| \u001b[0m9        \u001b[0m | \u001b[0m0.789    \u001b[0m | \u001b[0m1.413e+04\u001b[0m | \u001b[0m8.708e+05\u001b[0m | \u001b[0m4.915    \u001b[0m |\n","| \u001b[0m10       \u001b[0m | \u001b[0m0.789    \u001b[0m | \u001b[0m5.045e+04\u001b[0m | \u001b[0m1.09e+05 \u001b[0m | \u001b[0m4.16     \u001b[0m |\n","| \u001b[0m11       \u001b[0m | \u001b[0m0.7887   \u001b[0m | \u001b[0m8.576e+04\u001b[0m | \u001b[0m7.321e+05\u001b[0m | \u001b[0m3.748    \u001b[0m |\n","| \u001b[0m12       \u001b[0m | \u001b[0m0.789    \u001b[0m | \u001b[0m9.688e+04\u001b[0m | \u001b[0m7.656e+05\u001b[0m | \u001b[0m4.972    \u001b[0m |\n","| \u001b[0m13       \u001b[0m | \u001b[0m0.7889   \u001b[0m | \u001b[0m5.352e+04\u001b[0m | \u001b[0m8.449e+05\u001b[0m | \u001b[0m2.053    \u001b[0m |\n","| \u001b[0m14       \u001b[0m | \u001b[0m0.7889   \u001b[0m | \u001b[0m5.582e+04\u001b[0m | \u001b[0m7.376e+05\u001b[0m | \u001b[0m1.198    \u001b[0m |\n","| \u001b[0m15       \u001b[0m | \u001b[0m0.7888   \u001b[0m | \u001b[0m6.681e+04\u001b[0m | \u001b[0m8.652e+05\u001b[0m | \u001b[0m2.816    \u001b[0m |\n","| \u001b[0m16       \u001b[0m | \u001b[0m0.789    \u001b[0m | \u001b[0m4.667e+04\u001b[0m | \u001b[0m9.66e+04 \u001b[0m | \u001b[0m4.991    \u001b[0m |\n","| \u001b[0m17       \u001b[0m | \u001b[0m0.7888   \u001b[0m | \u001b[0m2.926e+04\u001b[0m | \u001b[0m5.075e+05\u001b[0m | \u001b[0m3.795    \u001b[0m |\n","| \u001b[0m18       \u001b[0m | \u001b[0m0.789    \u001b[0m | \u001b[0m3.034e+04\u001b[0m | \u001b[0m7.412e+05\u001b[0m | \u001b[0m2.06     \u001b[0m |\n","| \u001b[0m19       \u001b[0m | \u001b[0m0.7889   \u001b[0m | \u001b[0m2.187e+04\u001b[0m | \u001b[0m7.316e+05\u001b[0m | \u001b[0m1.123    \u001b[0m |\n","=============================================================\n","{'C': 22947.60410361818, 'max_iter': 739306.4475235178, 'solver': 0.6362982886247337}\n"]}]},{"cell_type":"markdown","source":["## Results\n","The Function Returned `{'C': 93655.43819938875, 'max_iter': 818620.7753348298, 'solver': 0.6552264622762094}` - meaning that `C: 93655`, `max_iter: 818620` and `solver: saga` are the best hyper parameters!"],"metadata":{"id":"8NaExtpo1qVr"}}]}