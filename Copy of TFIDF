{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"xx0hi_5nZtBw"},"outputs":[],"source":["#working on TFIDF"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yX82SYl3Zwxb"},"outputs":[],"source":["#import\n","import pandas as pd\n","import numpy as np\n","import os\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","#additional packages\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","\n","from sklearn.model_selection import cross_val_score, StratifiedKFold, train_test_split\n","from sklearn.metrics import make_scorer, accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, mean_squared_error, log_loss, confusion_matrix\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import GridSearchCV"]},{"cell_type":"code","source":["#load the dataset\n","from google.colab import drive\n","drive.mount('/content/drive')\n","X_test = pd.read_csv('/content/drive/MyDrive/BTAI/tweetsum_test.csv')\n","X_train = pd.read_csv('/content/drive/MyDrive/BTAI/tweetsum_train.csv')\n","X_val = pd.read_csv('/content/drive/MyDrive/BTAI/tweetsum_val.csv')\n","\n","# Function\n","def clean(test,train,val):\n","  # Col for Word Count\n","  train['word_count']=train['sentence'].apply(lambda x:len(x.split()))\n","  test['word_count']=test['sentence'].apply(lambda x:len(x.split()))\n","  val['word_count']=val['sentence'].apply(lambda x:len(x.split()))\n","\n","  #adding a new column to X_train \"is_question\" that flags true for question senteces and false for non-question sentences\n","  question_words = [\"who\", \"what\", \"when\", \"where\", \"why\", \"how\", \"if\"]\n","  train['is_question'] = (train['sentence'].str.endswith('?') | train['sentence'].str.lower().str.contains(fr'\\b(?:{\"|\".join(question_words)})\\b'))\n","  test['is_question'] = (train['sentence'].str.endswith('?') | train['sentence'].str.lower().str.contains(fr'\\b(?:{\"|\".join(question_words)})\\b'))\n","  val['is_question'] = (train['sentence'].str.endswith('?') | train['sentence'].str.lower().str.contains(fr'\\b(?:{\"|\".join(question_words)})\\b'))\n","\n","  # # Drop sender, annot_id, dialog_id, and Unnamed: 0\n","  # train.drop(['sender', 'annot_id', 'dialog_id', 'Unnamed: 0'], axis = 1, inplace = True)\n","  # test.drop(['sender', 'annot_id', 'dialog_id', 'Unnamed: 0'], axis = 1, inplace = True)\n","  # val.drop(['sender', 'annot_id', 'dialog_id', 'Unnamed: 0'], axis = 1, inplace = True)\n","\n","  return test,train,val\n","\n","X_train, X_test, X_val = clean(X_train, X_test, X_val)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"49Dkv0s1dwIU","executionInfo":{"status":"ok","timestamp":1701736081671,"user_tz":300,"elapsed":2320,"user":{"displayName":"Fahad Faruqi","userId":"14658484526879603264"}},"outputId":"4989c687-0ea7-4a2a-f208-85140b7665a9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["X_val['is_salient'].mean()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Vfo_feLZXrVS","executionInfo":{"status":"ok","timestamp":1701736153817,"user_tz":300,"elapsed":2,"user":{"displayName":"Fahad Faruqi","userId":"14658484526879603264"}},"outputId":"dcb3f942-8c93-46a5-a754-28061a327e22"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.21097111247695144"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["# @Menna- this function can be copied for u to use!\n","\n","#function that uses TFIDF to transform the text data of the sentences and returns the new dataframes\n","def TFIDF(X_test, X_train, X_val):\n","  # Create a TfidfVectorizer object and save it to the variable 'tfidf_vectorizer'\n","  # Create a TfidfVectorizer object\n","  tfidf_vectorizer = TfidfVectorizer(min_df=100)\n","\n","  # Fit the vectorizer to X_train\n","  tfidf_vectorizer.fit(X_train['sentence'])\n","\n","  #print the first 50 items in vocabulary\n","  # print(\"Vocabulary size {0}: \".format(len(tfidf_vectorizer.vocabulary_)))\n","  # print(str(list(tfidf_vectorizer.vocabulary_.items())[0:50])+'\\n')\n","\n","  # Using the fitted vectorizer, transform both the train, test and validation data using the fitted vectorizer\n","  X_train_tfidf = tfidf_vectorizer.transform(X_train['sentence'])\n","  X_test_tfidf = tfidf_vectorizer.transform(X_test['sentence'])\n","  X_val_tfidf = tfidf_vectorizer.transform(X_val['sentence'])\n","\n","  # Create DataFrames for the TF-IDF vectors\n","  X_train_tfidf_df = pd.DataFrame(X_train_tfidf.toarray(), columns=tfidf_vectorizer.get_feature_names_out())\n","  X_test_tfidf_df = pd.DataFrame(X_test_tfidf.toarray(), columns=tfidf_vectorizer.get_feature_names_out())\n","  X_val_tfidf_df = pd.DataFrame(X_val_tfidf.toarray(), columns=tfidf_vectorizer.get_feature_names_out())\n","\n","  # Concatenate the TF-IDF DataFrames with original\n","  X_train_with_tfidf = pd.concat([X_train, X_train_tfidf_df], axis=1)\n","  X_test_with_tfidf = pd.concat([X_test, X_test_tfidf_df], axis=1)\n","  X_val_with_tfidf = pd.concat([X_val, X_val_tfidf_df], axis=1)\n","\n","  #drop the sentence feature- we have the vectorized one now\n","  X_train_with_tfidf = X_train_with_tfidf.drop(\"sentence\", axis='columns')\n","  X_test_with_tfidf = X_test_with_tfidf.drop(\"sentence\", axis='columns')\n","  X_val_with_tfidf = X_val_with_tfidf.drop(\"sentence\", axis='columns')\n","\n","  return X_train_with_tfidf, X_test_with_tfidf, X_val_with_tfidf\n","\n","#you can now use the dataframes with the tfidf features\n","X_train, X_test, X_val = TFIDF(X_test, X_train, X_val)"],"metadata":{"id":"84mzhhdNd-ej"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train.to_csv('X_train_with_tfidf.csv')\n","X_test.to_csv('X_test_with_tfidf.csv')\n","X_val.to_csv('X_val_with_tfidf.csv')"],"metadata":{"id":"xCEymY23LnwE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train.head()\n","X_test.head()\n","X_val.head()"],"metadata":{"id":"Rldad4S7e2Xc","colab":{"base_uri":"https://localhost:8080/","height":273},"executionInfo":{"status":"ok","timestamp":1701729456874,"user_tz":300,"elapsed":8,"user":{"displayName":"Hanna Elizabeth Martin","userId":"08982508819591720439"}},"outputId":"f0634994-311f-4d95-95b1-1a1827c145ea"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0                         dialog_id  annot_id    sender  \\\n","0           0  caae83a2ed59e4959d814ea567980226         0  customer   \n","1           1  caae83a2ed59e4959d814ea567980226         1  customer   \n","2           2  caae83a2ed59e4959d814ea567980226         2  customer   \n","3           3  caae83a2ed59e4959d814ea567980226         0  customer   \n","4           4  caae83a2ed59e4959d814ea567980226         1  customer   \n","\n","   is_salient  word_count  is_question   10   11   15  ...  would  wouldn  \\\n","0        True          15        False  0.0  0.0  0.0  ...    0.0     0.0   \n","1        True          15        False  0.0  0.0  0.0  ...    0.0     0.0   \n","2        True          15        False  0.0  0.0  0.0  ...    0.0     0.0   \n","3       False           2         True  0.0  0.0  0.0  ...    0.0     0.0   \n","4       False           2         True  0.0  0.0  0.0  ...    0.0     0.0   \n","\n","   wrong  xbox  xboxsupport  yes  yesterday  yet  you  your  \n","0    0.0   0.0          0.0  0.0        0.0  0.0  0.0   0.0  \n","1    0.0   0.0          0.0  0.0        0.0  0.0  0.0   0.0  \n","2    0.0   0.0          0.0  0.0        0.0  0.0  0.0   0.0  \n","3    0.0   0.0          0.0  0.0        0.0  0.0  0.0   0.0  \n","4    0.0   0.0          0.0  0.0        0.0  0.0  0.0   0.0  \n","\n","[5 rows x 559 columns]"],"text/html":["\n","  <div id=\"df-ad8b7457-6207-4369-bae8-443435eb4372\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>dialog_id</th>\n","      <th>annot_id</th>\n","      <th>sender</th>\n","      <th>is_salient</th>\n","      <th>word_count</th>\n","      <th>is_question</th>\n","      <th>10</th>\n","      <th>11</th>\n","      <th>15</th>\n","      <th>...</th>\n","      <th>would</th>\n","      <th>wouldn</th>\n","      <th>wrong</th>\n","      <th>xbox</th>\n","      <th>xboxsupport</th>\n","      <th>yes</th>\n","      <th>yesterday</th>\n","      <th>yet</th>\n","      <th>you</th>\n","      <th>your</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>caae83a2ed59e4959d814ea567980226</td>\n","      <td>0</td>\n","      <td>customer</td>\n","      <td>True</td>\n","      <td>15</td>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>caae83a2ed59e4959d814ea567980226</td>\n","      <td>1</td>\n","      <td>customer</td>\n","      <td>True</td>\n","      <td>15</td>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>caae83a2ed59e4959d814ea567980226</td>\n","      <td>2</td>\n","      <td>customer</td>\n","      <td>True</td>\n","      <td>15</td>\n","      <td>False</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>caae83a2ed59e4959d814ea567980226</td>\n","      <td>0</td>\n","      <td>customer</td>\n","      <td>False</td>\n","      <td>2</td>\n","      <td>True</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>caae83a2ed59e4959d814ea567980226</td>\n","      <td>1</td>\n","      <td>customer</td>\n","      <td>False</td>\n","      <td>2</td>\n","      <td>True</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 559 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ad8b7457-6207-4369-bae8-443435eb4372')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ad8b7457-6207-4369-bae8-443435eb4372 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ad8b7457-6207-4369-bae8-443435eb4372');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-24952132-d5a1-4ddb-9b39-f9fcca34895e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-24952132-d5a1-4ddb-9b39-f9fcca34895e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-24952132-d5a1-4ddb-9b39-f9fcca34895e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["#Hanna\n","#TFIDF + Logistic Regression\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import log_loss\n","from sklearn.metrics import accuracy_score\n","\n","y_train_logreg=X_train[\"is_salient\"]\n","y_test_logreg=X_test[\"is_salient\"]\n","y_val_logreg=X_val[\"is_salient\"]\n","\n","feature_list=list(X_train.select_dtypes(include = ['float64', 'int64']).columns)\n","X_train.head()\n","\n","X_train_logreg=X_train[feature_list]\n","X_test_logreg=X_test[feature_list]\n","X_val_logreg=X_val[feature_list]\n","\n","# apply the dtype attribute\n","result = X_train_logreg.dtypes\n","\n","print(\"Output:\")\n","print(result)\n","\n","print(\"Number of examples: \" + str(X_train.shape[0]))\n","print(\"\\nNumber of Features:\" + str(X_train.shape[1]))\n","print(str(list(X_train.columns)))"],"metadata":{"id":"GhrmQTZoslKr","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1701729457199,"user_tz":300,"elapsed":329,"user":{"displayName":"Hanna Elizabeth Martin","userId":"08982508819591720439"}},"outputId":"6672ddf6-63fb-419b-cd9e-7825ec5eed9a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Output:\n","Unnamed: 0      int64\n","annot_id        int64\n","word_count      int64\n","10            float64\n","11            float64\n","               ...   \n","yes           float64\n","yesterday     float64\n","yet           float64\n","you           float64\n","your          float64\n","Length: 555, dtype: object\n","Number of examples: 51483\n","\n","Number of Features:559\n","['Unnamed: 0', 'dialog_id', 'annot_id', 'sender', 'is_salient', 'word_count', 'is_question', '10', '11', '15', '20', '24', '30', 'able', 'about', 'access', 'account', 'actually', 'add', 'address', 'adobecare', 'advise', 'afraid', 'after', 'again', 'agent', 'ago', 'airasiasupport', 'airport', 'all', 'already', 'also', 'always', 'am', 'amazon', 'amazonhelp', 'americanair', 'amp', 'an', 'and', 'another', 'answer', 'any', 'anything', 'apologies', 'apologize', 'app', 'apple', 'applesupport', 'appreciate', 'are', 'area', 'argoshelpers', 'around', 'as', 'asap', 'ask', 'ask_spectrum', 'askamex', 'askebay', 'asked', 'askplaystation', 'assist', 'assistance', 'asurioncares', 'at', 'atviassist', 'available', 'azuresupport', 'back', 'bag', 'battery', 'be', 'because', 'been', 'before', 'being', 'best', 'better', 'bit', 'book', 'booked', 'booking', 'both', 'bought', 'box', 'british_airways', 'business', 'but', 'button', 'buy', 'by', 'call', 'called', 'can', 'cancel', 'cannot', 'car', 'card', 'care', 'case', 'caused', 'chance', 'change', 'changes', 'charge', 'chat', 'check', 'checked', 'checking', 'claim', 'click', 'co', 'code', 'come', 'company', 'computer', 'concern', 'confirm', 'confirmation', 'connect', 'connection', 'console', 'contact', 'continue', 'correct', 'could', 'couldn', 'credit', 'currently', 'customer', 'customers', 'data', 'date', 'day', 'days', 'delay', 'delayed', 'delivery', 'delta', 'details', 'device', 'devices', 'did', 'didn', 'different', 'direct', 'directly', 'dm', 'do', 'does', 'doesn', 'doing', 'don', 'done', 'down', 'download', 'due', 'earlier', 'else', 'email', 'end', 'error', 'even', 'ever', 'every', 'everything', 'experience', 'extra', 'far', 'feedback', 'feel', 'few', 'find', 'fine', 'first', 'fix', 'fixed', 'flight', 'flights', 'follow', 'following', 'for', 'forward', 'found', 'free', 'from', 'frustrating', 'frustration', 'full', 'further', 'future', 'game', 'gdrqu22ypt', 'get', 'getting', 'give', 'given', 'glad', 'glocare', 'go', 'going', 'good', 'got', 'great', 'gt', 'guys', 'gwrhelp', 'had', 'happen', 'happened', 'happening', 'happens', 'happy', 'hard', 'has', 'have', 'haven', 'having', 'he', 'hear', 'hello', 'help', 'helps', 'here', 'hey', 'hi', 'hold', 'home', 'hope', 'hour', 'hours', 'how', 'however', 'hp', 'https', 'hulu_support', 'idea', 'idea_cares', 'if', 'in', 'inconvenience', 'info', 'information', 'internet', 'into', 'ios', 'iphone', 'is', 'isn', 'issue', 'issues', 'it', 'item', 'items', 'its', 'journey', 'just', 'keep', 'kindly', 'know', 'laptop', 'last', 'late', 'later', 'latest', 'leave', 'left', 'let', 'like', 'line', 'link', 'list', 'live', 'll', 'log', 'london', 'long', 'longer', 'look', 'looking', 'lost', 'love', 'made', 'make', 'manager', 'many', 'marksandspencer', 'matter', 'may', 'maybe', 'me', 'mean', 'message', 'messages', 'microsofthelps', 'might', 'minutes', 'mobile', 'modem', 'money', 'month', 'more', 'morning', 'most', 'move', 'much', 'music', 'my', 'name', 'need', 'network', 'never', 'new', 'next', 'night', 'nikesupport', 'no', 'not', 'nothing', 'now', 'number', 'o2', 'of', 'off', 'offer', 'oh', 'ok', 'okay', 'on', 'once', 'one', 'online', 'only', 'open', 'option', 'options', 'or', 'order', 'other', 'our', 'out', 'over', 'page', 'paid', 'pass', 'patience', 'pay', 'payment', 'pc', 'people', 'phone', 'place', 'play', 'please', 'plus', 'point', 'possible', 'posted', 'power', 'price', 'problem', 'problems', 'process', 'product', 'provide', 'provided', 'purchase', 'put', 'question', 'questions', 're', 'reach', 'really', 'reason', 'receive', 'received', 'recommend', 'refund', 'regarding', 'regards', 'reply', 'report', 'request', 'reset', 'resolve', 'resolved', 'response', 'restarting', 'return', 'review', 'right', 'router', 'run', 'running', 'safaricom_care', 'said', 'sainsburys', 'same', 'say', 'saying', 'says', 'screen', 'screenshot', 'seat', 'seats', 'security', 'see', 'seems', 'seller', 'send', 'sent', 'service', 'services', 'set', 'settings', 'share', 'she', 'should', 'show', 'showing', 'shows', 'since', 'site', 'so', 'some', 'someone', 'something', 'song', 'songs', 'soon', 'sorry', 'southwestair', 'speak', 'specific', 'spotify', 'spotifycares', 'sprintcare', 'staff', 'start', 'station', 'steps', 'still', 'stock', 'store', 'stores', 'suggest', 'support', 'sure', 'sw_help', 'system', 'take', 'team', 'tell', 'tesco', 'than', 'thank', 'thanks', 'that', 'the', 'their', 'them', 'then', 'there', 'these', 'they', 'thing', 'things', 'think', 'this', 'those', 'though', 'through', 'ticket', 'tickets', 'time', 'times', 'tmobilehelp', 'to', 'today', 'told', 'tomorrow', 'too', 'touch', 'train', 'trains', 'travel', 'tried', 'trouble', 'try', 'trying', 'tv', 'tweet', 'twitter', 'two', 'ty', 'unable', 'understand', 'unfortunately', 'until', 'up', 'update', 'updated', 'updates', 'upgrade', 'ur', 'us', 'use', 'used', 'using', 've', 'verizonsupport', 'version', 'very', 'via', 'virgintrains', 'visit', 'wait', 'waiting', 'want', 'was', 'wasn', 'watch', 'way', 'we', 'website', 'week', 'welcome', 'well', 'went', 'were', 'what', 'when', 'where', 'which', 'while', 'who', 'why', 'wifi', 'will', 'windows', 'with', 'within', 'without', 'won', 'work', 'worked', 'working', 'works', 'would', 'wouldn', 'wrong', 'xbox', 'xboxsupport', 'yes', 'yesterday', 'yet', 'you', 'your']\n"]}]},{"cell_type":"code","source":["def train_val_test_LR(X_train, y_train, X_test, y_test, X_val, y_val):\n","  #didnt use validation here- we didnt tune any hyperparams\n","  model=LogisticRegression(C=1)\n","  model.fit(X_train, y_train)\n","  probability_predictions=model.predict_proba(X_test)\n","  l_loss=log_loss(y_test, probability_predictions)\n","  class_label_predictions=model.predict(X_test)\n","\n","  acc_score=accuracy_score(y_test, class_label_predictions)\n","  precision = precision_score(y_test, class_label_predictions)\n","  recall = recall_score(y_test, class_label_predictions)\n","  f1 = f1_score(y_test, class_label_predictions)\n","  roc_auc = roc_auc_score(y_test, probability_predictions[:, 1])\n","\n","  return class_label_predictions,l_loss, acc_score, precision, recall, f1, roc_auc\n","\n","class_label_predictions,loss, acc, precision, recall, f1, roc_auc = train_val_test_LR(X_train_logreg, y_train_logreg, X_test_logreg, y_test_logreg, X_val_logreg, y_val_logreg)\n","print('Log loss: ' + str(loss))\n","#accuracy: percentage of predictions that are correct\n","# (TP+TN)/(TP+TN+FP+FN)\n","print('Accuracy: ' + str(acc))\n","#precision: the percentage of positive(salient) predictions that are correct\n","#the percentage of salient predictions that were actually salient\n","# TP/(TP+FP)\n","print('Precision: ' + str(precision))\n","#recall: the percentage of positive cases that were predicted as positive\n","# the percentage of salient sentences that were predicted as salient\n","# TP/(TP+FN)\n","print('Recall: ' + str(recall))\n","print('F1 Score: ' + str(f1))\n","print('ROC AUC Score: ' + str(roc_auc))\n","print('Class labels: ' + str(class_label_predictions[0:20]))\n","\n","#print out the percentage the model determines an example to be salient\n","#in test data: 19.13% of examples are salient\n","print(np.mean(class_label_predictions))\n","\n","#look into: cross validation vs using our validation data set\n","#cross validation randomization - using seed values between models\n","\n","\n","\n","# Generate the confusion matrix\n","cm = confusion_matrix(y_test_logreg, class_label_predictions)\n","\n","sns.heatmap(cm,\n","            annot=True,\n","            fmt='g',\n","            xticklabels=['Not Salient','Salient'],\n","            yticklabels=['Not Salient','Salient'])\n","plt.xlabel('Predicted')\n","plt.ylabel('True')\n","plt.title('Confusion Matrix')\n","plt.show()\n","\n","print(len(class_label_predictions))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":671},"id":"RC9CgViZbyz0","executionInfo":{"status":"ok","timestamp":1701736241956,"user_tz":300,"elapsed":6192,"user":{"displayName":"Hanna Elizabeth Martin","userId":"08982508819591720439"}},"outputId":"24bc1490-7e63-4bbc-d15f-6018391cd237"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Log loss: 0.4095017620444538\n","Accuracy: 0.8073150224215246\n","Precision: 0.4917218543046358\n","Recall: 0.2175824175824176\n","F1 Score: 0.3016759776536313\n","ROC AUC Score: 0.8160036001657904\n","Class labels: [False False False False False False False False False False False False\n"," False False False False False False False False]\n","0.08464125560538116\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["7136\n"]}]},{"cell_type":"code","source":["#tuning hyperparam C - use validation for this\n","def train_test_val_LR(X_train, y_train, X_test, y_test, X_val, y_val):\n","  param_grid = {'C': [0.1, 1, 10]}\n","  model=LogisticRegression()\n","  grid_search = GridSearchCV(model, param_grid, cv=5, scoring='f1')\n","  grid_search.fit(X_val, y_val)\n","  best_C = grid_search.best_params_['C']\n","  print(best_C)\n","  best_model = LogisticRegression(C=best_C)\n","  best_model.fit(X_train, y_train)\n","  probability_predictions=best_model.predict_proba(X_test)\n","  l_loss=log_loss(y_test, probability_predictions)\n","  class_label_predictions=best_model.predict(X_test)\n","\n","\n","  acc_score=accuracy_score(y_test, class_label_predictions)\n","  precision = precision_score(y_test, class_label_predictions)\n","  recall = recall_score(y_test, class_label_predictions)\n","  f1 = f1_score(y_test, class_label_predictions)\n","  roc_auc = roc_auc_score(y_test, probability_predictions[:, 1])\n","\n","  return class_label_predictions,l_loss, acc_score, precision, recall, f1, roc_auc\n","\n","class_label_predictions,loss, acc, precision, recall, f1, roc_auc = train_test_val_LR(X_train_logreg, y_train_logreg, X_test_logreg, y_test_logreg, X_test_logreg, y_test_logreg)\n","print('Log loss: ' + str(loss))\n","print('Accuracy: ' + str(acc))\n","print('Precision: ' + str(precision))\n","print('Recall: ' + str(recall))\n","print('F1 Score: ' + str(f1))\n","print('ROC AUC Score: ' + str(roc_auc))\n","print('Class labels: ' + str(class_label_predictions[0:20]))\n"],"metadata":{"id":"Y78bIqJSgK0S","executionInfo":{"status":"ok","timestamp":1701711534640,"user_tz":300,"elapsed":0,"user":{"displayName":"Hanna Elizabeth Martin","userId":"08982508819591720439"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"f1c8e88c-8b1c-496d-b11e-09b538f60447"},"execution_count":null,"outputs":[{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n","/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["1\n","Log loss: 0.4095017620444538\n","Accuracy: 0.8073150224215246\n","Precision: 0.4917218543046358\n","Recall: 0.2175824175824176\n","F1 Score: 0.3016759776536313\n","ROC AUC Score: 0.8160036001657904\n","Class labels: [False False False False False False False False False False False False\n"," False False False False False False False False]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"OGYnqaTCgonJ","colab":{"base_uri":"https://localhost:8080/","height":250},"executionInfo":{"status":"error","timestamp":1701729470149,"user_tz":300,"elapsed":326,"user":{"displayName":"Hanna Elizabeth Martin","userId":"08982508819591720439"}},"outputId":"3bf553ab-f35b-464f-da51-2b719fb99177"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-7-0e076bc525ce>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Generate the confusion matrix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mcm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclass_label_predictions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mcm\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclass_label_predictions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m sns.heatmap(cm,\n","\u001b[0;31mNameError\u001b[0m: name 'y_test' is not defined"]}]},{"cell_type":"code","source":[],"metadata":{"id":"MwQFiVHu4N3W"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1fmcf0zGQNfP0ag3X2FjSadJqz4oDbjOl","timestamp":1701813538195}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}